name: CD Docker to Azure VM (CDonVM)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  APP: CDonVM
  IMAGE_LATEST: ghcr.io/thomasbdc/cdonvm:latest
  IMAGE_SHA: ghcr.io/thomasbdc/cdonvm:${{ github.sha }}
  VM_HOST: ${{ secrets.VM_HOST }}
  VM_USER: ${{ secrets.VM_USER }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./CDonVM/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_LATEST }}
            ${{ env.IMAGE_SHA }}

      - name: Prepare SSH
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_cd
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_cd
          ssh-keyscan -H "${{ env.VM_HOST }}" >> ~/.ssh/known_hosts

      - name: Copy ops folder to VM
        run: |
          # Prépare le dossier cible
          ssh -i ~/.ssh/id_cd ${{ env.VM_USER }}@${{ env.VM_HOST }} 'sudo mkdir -p /opt/${{ env.APP }} && sudo chown -R $USER:$USER /opt/${{ env.APP }}'
      
          # Copie récursive de tout CDonVM/ops → /opt/<APP>/
          scp -r -i ~/.ssh/id_cd CDonVM/ops/* ${{ env.VM_USER }}@${{ env.VM_HOST }}:/opt/${{ env.APP }}/
      
          # (Optionnel) Patch l'image si compose.yml contient un placeholder
          ssh -i ~/.ssh/id_cd ${{ env.VM_USER }}@${{ env.VM_HOST }} "sed -i 's#ghcr.io/OWNER/REPO:latest#${{ env.IMAGE_LATEST }}#' /opt/${{ env.APP }}/compose.yml || true"
      
          # (Sécu) Si app.env est attendu par compose et n'existe pas, crée un fichier vide
          ssh -i ~/.ssh/id_cd ${{ env.VM_USER }}@${{ env.VM_HOST }} 'mkdir -p /opt/${{ env.APP }}/app && [ -f /opt/${{ env.APP }}/app/app.env ] || : > /opt/${{ env.APP }}/app/app.env'


      - name: Deploy
        run: |
          ssh -i ~/.ssh/id_cd ${{ env.VM_USER }}@${{ env.VM_HOST }} '
            set -Eeuo pipefail
            cd /opt/'"${{ env.APP }}"'
            # Met à jour et (re)lance les services définis dans compose.yml
            docker compose -f compose.yml up -d --pull always
            docker image prune -f
          '

      - name: Smoke test
        run: |
          curl -I --max-time 5 http://${{ env.VM_HOST }} | (head -n 1 || true)
